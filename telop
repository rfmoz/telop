#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""telop - Codifica y descodifica mensajes telegráficos del sistema Mathé"""
# Copyright (C) 2021-2024 - Ricardo F.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse, string, time, re, logging, sys, unicodedata, random

__version__ = '2.6'

# Tamaño máximo de texto a codificar
MAX_TXT = 250

def get_arguments(msg, lencript):
    '''obtener argumentos'''

    parser = argparse.ArgumentParser()
    parser.add_argument('-t', '--tipo', default=msg['tipo'], action='store', type=str, choices=['0', '1', '2', '3', '4', '5', '6', '8'],
                        help='tipo de servicio -> 0-general | 4-gral. urgente | 8-gral. urgentísimo | 1-rectificación | 2-interno | 3-vigilancia | 5-continuación | 6-acuse recibo')
    parser.add_argument('-o', '--origen', default=msg['origen'], action='store', type=int, metavar='[nº]', help='torre de origen')
    parser.add_argument('-d', '--destino', default=msg['destino'], action='store', type=int, metavar='[nº]', help='torre de destino')
    parser.add_argument('-b', '--breve', default=False, action='store_true', help='formato fecha y hora reducido')
    parser.add_argument('-c', '--comandancia', default=False, action='store_true', help='emplear n. de comandancia en origen / destino')
    parser.add_argument('--diccionario', default=None, action='store_true', help='mostrar diccionario codificación')
    parser.add_argument('--pwd', default=None, action='store', help='cifra / descifra el mensaje con contraseña')
    parser.add_argument('-r', '--registro', default=msg['registro'], action='store', type=int, metavar='[nº]', help='nº registro despacho')
    parser.add_argument('mensaje', default=msg['mensaje'], nargs='?', action='store', type=str, help='texto del mensaje entre \' \'')
    parser.add_argument('-s', '--sufijo', default=msg['sufijo'], action='store', type=int, help='sufijo aplicable a los mensajes tipo 1, 2, 3 y 6')
    parser.add_argument('--solo', default=False, action='store_true', help='sólo imprime mensaje resultante')
    parser.add_argument('-v', '--verbose', default=False, action='store_true', help='debug')
    parser.add_argument('--version', action='version', version='%(prog)s ' + __version__)
    parser.add_argument('-z', dest='zcodif', default=None, type=int, choices=[0, 1], help='proceso a ejecutar -> (auto) | 0-codificar | 1-descodificar')

    arg = parser.parse_args()

    if arg.verbose:
        logging.basicConfig(format='%(levelname)s:%(message)s', level=logging.DEBUG)

    logging.info('Argumentos raw:\t %s', str(vars(arg)))

    # Según el tipo de mensaje, comprobar asignaciones de sufijo
    if arg.tipo == '1':
        if arg.sufijo:
            if arg.sufijo not in [6, 9]:
                parser.print_help()
                print('\nSufijos disponibles para el nº de rectificación:')
                print('\t\t\t-s 6   repetir registro')
                print('\t\t\t-s 9   anular registro')
                sys.exit(0)
        else:
            arg.sufijo = random.choice(['6', '9'])

    if arg.tipo == '2' and not arg.sufijo:
        arg.sufijo = 0

    if arg.tipo in ['6', '3']:
        if arg.sufijo:
            if arg.sufijo not in [0, 1, 2, 3, 4]:
                parser.print_help()
                print('\nSufijos disponibles para el nº de incidencia:')
                print('\t\t\t-s 0   correcto')
                print('\t\t\t-s 1   corte por niebla')
                print('\t\t\t-s 2   corte por ausencia')
                print('\t\t\t-s 3   vanguardia ocupada')
                print('\t\t\t-s 4   corte por avería')
                sys.exit(0)
        if arg.tipo == '3' and arg.sufijo is None:
            arg.sufijo = ''
        if arg.tipo == '6' and arg.sufijo is None:
            arg.sufijo = '00'

    if arg.diccionario:
        print('-' * 10)
        print('Nº - Valor')
        print('-' * 10)
        for pos, val in enumerate(lencript):  # Siempre < 100
            print(f'{str(pos).zfill(2)} - {val}')
        sys.exit(0)

    # Asignar descodificación / codificación automaticamente. Si comienza por ~ */*/* -> descodificar
    if arg.zcodif is None:
        if re.match(r'^\d/(.+?)/(.+?)', arg.mensaje) is None:
            arg.zcodif = 0
            logging.info('Auto codificar = 0')
        else:
            arg.zcodif = 1
            logging.info('Auto descodificar = 1')

    # Comprobar asignación torre
    if not ((0 <= arg.origen <= 999) and (0 <= arg.destino <= 999)):
        logging.error('Torre de origen o destino inválida: [0-999]')
        sys.exit(1)

    # En codificacion, comprobar requisitos y eliminar new line siempre
    if arg.zcodif == 0:
        if arg.mensaje and len(arg.mensaje) > MAX_TXT:
            logging.warning('Mensaje demasiado grande. Acortado a %s caracteres', str(MAX_TXT))
            arg.mensaje = arg.mensaje[:MAX_TXT]
    arg.mensaje = arg.mensaje.replace('\n', ' ').strip()

    # Asignar los valores de los argumentos como strings
    for key in vars(arg):
        msg[key] = str(vars(arg)[key])

    # Rellenar hora y dia según formato
    if arg.breve:
        fchora = int(time.strftime("%H"))
        fcmin = int(time.strftime("%M"))
        if fcmin >= 45:
            fchora = fchora + 75
        elif fcmin >= 30:
            fchora = fchora + 50
        elif fcmin >= 15:
            fchora = fchora + 25
        fchora = str(fchora).zfill(2)
        fcdia = str(time.strftime("%d")[-1])

        msg['horadia'] = fchora + fcdia
    else:
        msg['horadia'] = str(time.strftime("%H%M%d"))

    # Unificar con ceros. 2 o 3 para origen y destino. 2 para registro y 3 para codigo
    if arg.comandancia:
        msg['origen'] = msg['origen'][:2].zfill(2)
        msg['destino'] = msg['destino'][:2].zfill(2)
    else:
        msg['origen'] = msg['origen'][:3].zfill(3)
        msg['destino'] = msg['destino'][:3].zfill(3)

    msg['registro'] = msg['registro'][:2].zfill(2)
    if arg.tipo == '2':
        msg['sufijo'] = msg['sufijo'][:3].zfill(3)

    logging.info('Argumentos txt:\t %s', str(msg))

    return arg, msg


def encffx(arg, ciphert, tipo=False):
    '''codificar ffx'''

    try:
        import pyffx
    except Exception as exp:
        logging.error('No se puede aplicar contraseña. Comprobar módulo "pyffx" --> %s', str(exp))
        return ciphert

    # Pedir contraseña en el prompt si se pasa 'ask' como clave
    if arg.pwd == 'ask':
        arg.pwd = input("Password?: ")

    effx = pyffx.Integer(arg.pwd.encode('utf_8'), length=len(ciphert))

    if tipo == 'cifra':
        return str(effx.encrypt(ciphert))
    elif tipo == 'descifra':
        return str(effx.decrypt(ciphert))
    else:
        return ciphert


def zcodif_codificar(arg, msg, lencript):
    '''codificar mensaje'''

    if msg['tipo'] in ['0','4','8']:  # Servicios generales
        # 0/0x10x5/232x040x/0x6/757575/0

        logging.info('Texto raw:\t\t %s', str(msg['mensaje']))

        # Recorrer los digitos del mensaje para codificar cada uno según la posición que ocupan en el diccionario
        cipert = ''  # Mensaje codificado
        for _, elem in enumerate(msg['mensaje']):

            if elem not in lencript:  # si el carácter no se encuentra en el diccionario
                elem = re.sub(r'[^\w]', r'', unicodedata.normalize('NFKD', elem)) # probar a normalizar: pasar a unicode, quita acentos y similar
                if elem not in lencript:  #  finalmente sustituir por '#' si no existe
                    elem = '#'

            # Asignar valor de la posicion del carácter, siempre con dos digitos '00'
            cipert += str(lencript.index(elem)).zfill(2)

        logging.info('Texto cod:\t\t %s', str(cipert))

        if arg.pwd:
            cipert = encffx(arg, cipert, 'cifra')
            logging.info('Texto ffx:\t\t %s', str(cipert))

        # Calcular novenales en base al tamaño del mensaje
        cociente = int(len(cipert) / 9)
        resto = int(len(cipert) % 9)
        msg['novenales'] = str(cociente).zfill(2) + str(resto)

        # Insertar arriadas en mensaje y borar la última si coincide
        ciperm = str(re.sub(r'(.{9})', r'\1/', cipert)).rstrip('/')

        sufijo = '/' + msg['novenales'] + '/' + ciperm + '/' + msg['tipo']

    elif msg['tipo'] == '2':  # Servicio interno
        # 2/0x1052/21261x/0x0/2
        msg['registro'] = ''
        sufijo = '/' + msg['sufijo'] + '/' + msg['tipo']

    elif msg['tipo'] == '3':  # Servicio de vigilancia
        # 3/0x1052/191709
        msg['registro'] = ''
        sufijo = '/' + msg['sufijo']

    elif msg['tipo'] == '6':  # Servicio acuse de recibo
        # 6/0x1052/1917090x/0x
        sufijo = '/' + msg['sufijo']

    elif msg['tipo'] == '5':  # Continuar transmisión
        # 5/0x1/0x
        msg['destino'] = '0'
        msg['horadia'] = ''
        sufijo = ''

    elif msg['tipo'] == '1':  # Rectificación
        # 1/0x1052/01/9
        msg['horadia'] = ''
        sufijo = '/' + msg['sufijo']

    else:
        logging.error('Sin tipo de mensaje')
        sys.exit(1)

    # Torre '0' sin valor. Indicación única de torre
    if int(msg['origen']) == int(msg['destino']) == 0:
        msg['destino'] = ''
    elif int(msg['origen']) == 0:
        msg['origen'] = ''
    elif int(msg['destino']) == 0:
        msg['destino'] = ''

    # Paquete formateado
    paquet = str(msg['tipo'] + '/' + msg['origen'] + msg['destino'] + '/' + msg['horadia'] + msg['registro'] + sufijo)

    paquet = re.sub(r'\/\/+', r'/', paquet)  # Eliminar '//' por campos vacíos
    paquet = re.sub(r'\/$', r'', paquet)  # Eliminar '/' al final

    logging.info('Mensaje raw:\t %s', paquet)

    # Salida final. Sustituir caracteres repetidos por x
    msg['procmsg'] = re.sub(r'(\w{1})\1', r'\1x', paquet)

    imprimir(arg, msg)



def zcodif_descodificar(arg, msg, lencript):
    '''descodificar mensaje'''

    # Reconstruir caracteres repetidos
    ciperm = re.sub(r'(.{1})x', r'\1\1', msg['mensaje']).replace(" ", "")

    try:
        # Extraer interrupciones finales si las hubiera en el suplemento final
        #  Busca el nº del tipo de mensaje junto con el valor mínimo de repeticiones de '/' que le corresponde
        #  y finaliza con el sufijo del formato de la interrupción

        while re.match(r'^(([048](/\d*){5})|([2](/\d*){4})|([16](/\d*){3})|([35](/\d*){2})).+'
                       r'(/(\d{3})/(\d{4,6}/)?([1-4]))+$', ciperm) is not None:
            # Procesar suplemento interrupciones según valores
            #  - Torre, díahora o hora, tipo incidencia
            #  - Torre, tipo incidencia
            regint = re.search(r'/(\d{3})/(\d{4,6}/)?([1-4])$', ciperm)
            msg['suplemento'] += '[T-' + regint.group(1) + ' '
            if regint.group(2):
                if len(regint.group(2)) == 7:
                    msg['suplemento'] += '(' + regint.group(2)[4:6] + ')'
                msg['suplemento'] += regint.group(2)[:2] + ':' + regint.group(2)[2:4] + 'h '
            intrc = regint.group(3)
            intrc = intrc.replace('1', '1-Niebla')
            intrc = intrc.replace('2', '2-Ausencia')
            intrc = intrc.replace('3', '3-Vang.Ocupada')
            intrc = intrc.replace('4', '4-Avería')
            msg['suplemento'] += intrc +']  '

            # Eliminar interrupción del mensaje
            logging.info('Intrr.:\t %s', str(regint.group(0)))
            ciperm = ciperm[:-len(regint.group(0))]

        # Regex para cabeceras de mensajes (mantener en cada caso los mismos 4 grupos) - https://regex101.com/r/zVgaDT/1

        # Procesar tipo 0
        if re.match(r'^([048])/(\d{2,6})/(\d{2,8})/(\d{3})\b', ciperm) is not None:
            search = re.search(r'^([048])/(\d{2,6})/(\d{2,8})/(\d{3})\b', ciperm)

            msg['novenales'] = search.group(4)

            # Calcular tamaño del texto en base a los novenales
            long_nov = (int(msg['novenales'][:2]) * 9) + (int(msg['novenales'][2:]))

            # Eliminar la cabecera del preámbulo del telegrama, quitar '/' y extraer longitud del texto
            cipert = ciperm.replace(search.group(0), '').replace('/', '')[:long_nov]

            logging.info("Texto raw:\t\t %s", cipert)

            if arg.pwd:
                cipert = encffx(arg, cipert, 'descifra')
                logging.info('Texto ffx:\t\t %s', str(cipert))

            # Comprobar integridad
            if long_nov != len(cipert):
                raise Exception('Extension mensaje incorrecta')
            else:
                # Recorrer a pares el texto y extraer la posición del carácter en la lista de códigos
                msg['procmsg'] = ''
                for i in range(0, long_nov - 1, 2):
                    msg['procmsg'] += lencript[int(cipert[i] + cipert[i+1])]

        # Procesar tipo 2
        elif re.match(r'^(2)/(\d{2,6})/(\d{3,6})/(\d{2,3})\b', ciperm) is not None:
            search = re.search(r'^(2)/(\d{2,6})/(\d{3,6})/(\d{2,3})\b', ciperm)
            #msg['procmsg'] = txt_valor_del_código

        # Procesar tipo 3
        elif re.match(r'^(3)/(\d{2,6})/(\d{3,6})(?:/(\d{1,2}))?\b', ciperm) is not None:
            search = re.search(r'^(3)/(\d{2,6})/(\d{3,6})(?:/(\d{1,2}))?\b', ciperm)

        # Procesar tipo 5
        elif re.match(r'^(5)/(\d{2,3})/(\d{2})()\b', ciperm) is not None:
            search = re.search(r'^(5)/(\d{2,3})/(\d{2})()\b', ciperm)

        # Procesar tipo 6
        elif re.match(r'^(6)/(\d{2,6})/(\d{2,8})/(\d{1,2})\b', ciperm) is not None:
            search = re.search(r'^(6)/(\d{2,6})/(\d{2,8})/(\d{1,2})\b', ciperm)

        # Procesar tipo 1
        elif re.match(r'^(1)/(\d{2,6})/(\d{2})/([69])((?:/\d{1,2}){0,9})\b', ciperm) is not None:
            search = re.search(r'^(1)/(\d{2,6})/(\d{2})/([69])((?:/\d{1,2}){0,9})\b', ciperm)
            # Recoge de manera recursiva '/' seguido de uno o dos números más
            msg['repetir'] = search.group(5).lstrip('/')

        else:
            raise Exception('Formato de mensaje inválido')

        # Asignar valores comunes
        msg['tipo'] = search.group(1)
        msg['sufijo'] = search.group(4)

        # Según nº torre o comandancia
        if len(search.group(2)) in (2, 4):
            msg['origen'] = search.group(2)[:2]
            msg['destino'] = search.group(2)[2:]
        elif len(search.group(2)) in (3, 6):
            msg['origen'] = search.group(2)[:3]
            msg['destino'] = search.group(2)[3:]
        else:
            msg['origen'] = ''
            msg['destino'] = ''

        # Según formato hora y registro corto/largo
        if len(search.group(3)) == 2:  # registro
            msg['horadia'] = ''
            msg['registro'] = search.group(3)
        elif len(search.group(3)) == 3:  # horadia-breve
            msg['horadia'] = search.group(3)[:3]
            msg['registro'] = ''
        elif len(search.group(3)) == 4:  # horadia sin dia
            msg['horadia'] = search.group(3)[:4]
            msg['registro'] = ''
        elif len(search.group(3)) == 5:  # horadia-breve + ref
            msg['horadia'] = search.group(3)[:3]
            msg['registro'] = search.group(3)[3:]
        elif len(search.group(3)) == 6:  # horadia-normal
            msg['horadia'] = search.group(3)[:6]
            msg['registro'] = ''
        elif len(search.group(3)) == 8: # horadia-normal + ref
            msg['horadia'] = search.group(3)[:6]
            msg['registro'] = search.group(3)[6:]
        else:
            msg['horadia'] = ''
            msg['registro'] = ''

    except Exception as exp:
        logging.error('Imposible descodificar --> %s', str(exp))
        sys.exit(1)

    imprimir(arg, msg)



def imprimir(arg, msg):
    '''salida por pantalla'''

    logging.info("Texto print:\t %s", msg)

    if arg.solo:
        print(msg['procmsg'])

    else:
        print('-' * 80)
        if msg['tipo'] == '0': print("Tipo:\t\t 0 - General")
        if msg['tipo'] == '4': print("Tipo:\t\t 4 - General urgente")
        if msg['tipo'] == '8': print("Tipo:\t\t 8 - General urgentísimo")
        if msg['tipo'] == '2':
            print("Tipo:\t\t 2 - Servicio Interno")
            print(f"Código:\t\t {msg['sufijo']}")
        if msg['tipo'] in ['3', '6']:
            if msg['tipo'] == '3':
                print("Tipo:\t\t 3 - Vigilancia")
            if msg['tipo'] == '6':
                print("Tipo:\t\t 6 - Acuse de recibo")
            if msg['sufijo'] == '00':
                print("Estado:\t\t 0x - Correcto")
            if msg['sufijo'] == '1':
                print("Estado:\t\t 1 - Incidencia niebla")
            if msg['sufijo'] == '2':
                print("Estado:\t\t 2 - Incidencia ausencia")
            if msg['sufijo'] == '3':
                print("Estado:\t\t 3 - Incidencia vanguardia ocupada")
            if msg['sufijo'] == '4':
                print("Estado:\t\t 4 - Incidencia avería")
        if msg['tipo'] == '5': print("Tipo:\t\t 5 - Continuación")
        if msg['tipo'] == '1':
            print("Tipo:\t\t 1 - Rectificación")
            if msg['sufijo'] == '6':
                print("Petición:\t 6 - Repetir registro")
                if msg['repetir']:
                    print(f"Novenales rep.:\t {msg['repetir']}")
            if msg['sufijo'] == '9':
                print("Petición:\t 9 - Anular registro")

        # Comprobar una o dos torres
        if msg['origen'] and msg['destino']:
            if len(msg['origen'] + msg['destino']) == 6:
                print(f"T. Origen:\t {msg['origen']}")
                print(f"T. Destino:\t {msg['destino']}")
            elif len(msg['origen'] + msg['destino']) == 4:
                print(f"Com. Origen:\t {msg['origen']}")
                print(f"Com. Destino:\t {msg['destino']}")
        else:
            if not msg['destino']:
                tsimple = msg['origen']
            if not msg['origen']:
                tsimple = msg['destino']
            if tsimple:
                if len(tsimple) == 3:
                    print(f"Torre:\t\t {tsimple}")
                elif len(tsimple) == 2:
                    print(f"Comandancia:\t {tsimple}")

        if len(msg['horadia']) == 3:  # Reconstruir hora breve
            fchora = int(msg['horadia'][:2])
            if fchora >= 75:
                hora = str(fchora - 75).zfill(2) + ':45'
            elif fchora >= 50:
                hora = str(fchora - 50).zfill(2) + ':30'
            elif fchora >= 25:
                hora = str(fchora - 25).zfill(2) + ':15'
            elif fchora >= 0:
                hora = str(fchora).zfill(2) + ':00'
            print(f"Hora y Día:\t [{msg['horadia']}] {hora} ?{msg['horadia'][2:]}")
        elif len(msg['horadia']) == 4:  # Hora sin dia
            print(f"Hora:\t\t {msg['horadia'][:2]}:{msg['horadia'][2:4]}")
        elif len(msg['horadia']) == 6:  # Hora normal
            print(f"Hora y Día:\t {msg['horadia'][:2]}:{msg['horadia'][2:4]} {msg['horadia'][4:6]}")

        if msg['registro']:
            print(f"Registro:\t {msg['registro']}")
        if msg['suplemento']:
            print(f"Interrupción:\t {msg['suplemento']}")
        if msg['procmsg'] is not None:
            if msg['tipo'] == '0':
                print(f"Novenales:\t {msg['novenales'][:2]}.{msg['novenales'][2:]}")
                if arg.zcodif == 0:  # Sólo en codificación
                    print(f"Mensaje txt:\t \'{msg['mensaje']}\'")
            print('-' * 80)
            print('')
            print(f"Mensaje:\t {msg['procmsg']}")
            print('')
        print('-' * 80)



def main():
    '''Inicio'''

    # Los caracteres del mensaje se sustituyen por la posición que ocupan en la lista (completa del 00 al 99)
    lencript = list(string.digits + string.ascii_letters + string.punctuation) + ['Ñ', 'ñ', '¿', '€', '', ' ']

    # Diccionario de mensaje. Valores por defecto
    msg = {'tipo': '0', 'origen': 1, 'destino': 52, 'horadia': None, 'registro': 0, 'novenales': None, 'mensaje': '...', 'procmsg': None, 'suplemento': '', 'sufijo': None, 'repetir': None}

    arg, msg = get_arguments(msg, lencript)

    if arg.zcodif == 0:
        zcodif_codificar(arg, msg, lencript)
    elif arg.zcodif == 1:
        zcodif_descodificar(arg, msg, lencript)
    else:
        logging.error('Fallo en la selección de tarea. Codificar / Descodificar')


if __name__ == "__main__":
    main()
